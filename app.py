import streamlit as st
from pdf2docx import Converter
from pdf2image import convert_from_bytes
from docx import Document
from docx.shared import Inches
from io import BytesIO
import tempfile
import os
import time

st.set_page_config(page_title="PDF ‚Üí Word Converter", layout="centered")

st.title("üìÑ ‚ûú üìù PDF ‚Üí Word (2 ch·∫ø ƒë·ªô: Visual / Text)")
st.markdown("Ch·ªçn ch·∫ø ƒë·ªô **Visual** ƒë·ªÉ gi·ªØ nguy√™n c√¥ng th·ª©c d∆∞·ªõi d·∫°ng ·∫£nh (khuy·∫øn ngh·ªã cho PDF c√≥ c√¥ng th·ª©c). Ch·ªçn **Text** ƒë·ªÉ xu·∫•t text (c√≥ th·ªÉ m·∫•t c√¥ng th·ª©c/ph·ª©c t·∫°p).")

mode = st.radio("Ch·ªçn ch·∫ø ƒë·ªô chuy·ªÉn ƒë·ªïi:", ("Visual (·∫£nh, gi·ªØ nguy√™n b·ªë c·ª•c)", "Text (pdf2docx)"))

uploaded_file = st.file_uploader("T·∫£i l√™n file PDF", type=["pdf"])
quality = st.slider("ƒê·ªô ph√¢n gi·∫£i ·∫£nh khi d√πng ch·∫ø ƒë·ªô Visual (dpi)", min_value=100, max_value=400, value=200)
max_pages = st.number_input("S·ªë trang t·ªëi ƒëa (0 = t·∫•t c·∫£)", min_value=0, value=0, step=1)

if uploaded_file is not None:
    # Hi·ªÉn th·ªã th√¥ng tin file
    file_size_kb = len(uploaded_file.getvalue()) // 1024
    st.write(f"**T√™n file:** {uploaded_file.name} ‚Äî **K√≠ch th∆∞·ªõc:** {file_size_kb} KB")

    if st.button("B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi"):
        start_time = time.time()
        fname = os.path.splitext(uploaded_file.name)[0]
        if mode.startswith("Visual"):
            st.info("Ch·∫ø ƒë·ªô Visual: s·∫Ω render t·ª´ng trang th√†nh ·∫£nh r·ªìi ch√®n v√†o .docx")
            try:
                with st.spinner("ƒêang render PDF th√†nh ·∫£nh... (c·∫ßn poppler tr√™n h·ªá th·ªëng)"):
                    # convert_from_bytes returns PIL Image list
                    # respect max_pages if >0
                    pdf_bytes = uploaded_file.getvalue()
                    images = convert_from_bytes(pdf_bytes, dpi=quality)
                    if max_pages and max_pages > 0:
                        images = images[:max_pages]
                st.success(f"ƒê√£ render {len(images)} trang th√†nh ·∫£nh.")
            except Exception as e:
                st.error(f"L·ªói khi render PDF: {e}")
                raise

            # T·∫°o docx v√† ch√®n t·ª´ng ·∫£nh
            doc = Document()
            # Optional: set page margins or style if needed
            tmp_docx = BytesIO()
            progress = st.progress(0)
            for i, img in enumerate(images, start=1):
                # save image to BytesIO as PNG to then insert
                img_byte = BytesIO()
                img.save(img_byte, format="PNG")
                img_byte.seek(0)

                # Add a page break before second+ pages to keep pages separate
                if i > 1:
                    doc.add_page_break()

                # Insert image: adjust width to page width approx (use Inches)
                # typical Word page width minus margins ~ 6.5 inches -> adjust to fit
                try:
                    doc.add_picture(img_byte, width=Inches(6.8))
                except Exception:
                    # fallback without width
                    doc.add_picture(img_byte)

                progress.progress(int(i / len(images) * 100))

            # Save to bytes
            doc_stream = BytesIO()
            doc.save(doc_stream)
            doc_stream.seek(0)

            st.success("Ho√†n th√†nh chuy·ªÉn ƒë·ªïi (Visual ‚Üí .docx).")
            elapsed = time.time() - start_time
            st.write(f"Th·ªùi gian: {elapsed:.1f}s")

            st.download_button(
                label="T·∫£i v·ªÅ file .docx (Visual)",
                data=doc_stream,
                file_name=f"{fname}_visual.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

        else:
            # Text mode: use pdf2docx
            st.info("Ch·∫ø ƒë·ªô Text: d√πng pdf2docx ƒë·ªÉ convert sang docx (c√≥ th·ªÉ kh√¥ng gi·ªØ ch√≠nh x√°c c√¥ng th·ª©c).")
            try:
                with tempfile.TemporaryDirectory() as tmpdir:
                    pdf_path = os.path.join(tmpdir, "input.pdf")
                    out_path = os.path.join(tmpdir, "output.docx")
                    # write uploaded bytes to file
                    with open(pdf_path, "wb") as f:
                        f.write(uploaded_file.getvalue())

                    converter = Converter(pdf_path)
                    # if user wants limit pages
                    if max_pages and max_pages > 0:
                        converter.convert(out_path, start=0, end=max_pages-1)
                    else:
                        converter.convert(out_path)
                    converter.close()

                    # read output
                    with open(out_path, "rb") as f:
                        docx_bytes = f.read()

                st.success("Ho√†n th√†nh chuy·ªÉn ƒë·ªïi (Text ‚Üí .docx).")
                elapsed = time.time() - start_time
                st.write(f"Th·ªùi gian: {elapsed:.1f}s")

                st.download_button(
                    label="T·∫£i v·ªÅ file .docx (Text)",
                    data=docx_bytes,
                    file_name=f"{fname}_text.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

            except Exception as e:
                st.error(f"L·ªói khi convert b·∫±ng pdf2docx: {e}")
